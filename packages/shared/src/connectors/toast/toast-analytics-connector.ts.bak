import type { SupabaseClient } from '@supabase/supabase-js';
import axios, { AxiosInstance } from 'axios';

import type { Database } from '../../types/database.generated';
import { BaseConnector } from '../base-connector';
import type { 
  ConnectorConfig, 
  FetchResult, 
  ConnectorCredentials
} from '../types';

interface ToastAnalyticsCredentials {
  clientId: string;
  clientSecret: string;
  locationGuid: string;
}

interface ToastAnalyticsToken {
  access_token: string;
  token_type: string;
  expires_in: number;
}

interface SalesData {
  date: string;
  net_sales: number;
  tax: number;
  tips: number;
  total_sales: number;
  check_count: number;
  guest_count: number;
}

interface CheckData {
  guid: string;
  opened_date: string;
  closed_date: string;
  total_amount: number;
  tax_amount: number;
  tip_amount: number;
  check_number: string;
  dining_option: string;
  server_name: string;
}

export class ToastAnalyticsConnector extends BaseConnector {
  private client: AxiosInstance;
  private analyticsCredentials: ToastAnalyticsCredentials;
  private authToken?: ToastAnalyticsToken;
  private tokenExpiresAt?: Date;

  constructor(
    credentials: ConnectorCredentials,
    config: ConnectorConfig,
    supabase: SupabaseClient<Database>
  ) {
    super(credentials, config, supabase);
    
    this.analyticsCredentials = credentials.credentials as unknown as ToastAnalyticsCredentials;
    
    // Analytics API uses a different base URL
    this.client = axios.create({
      baseURL: 'https://ws-api.toasttab.com',
      headers: {
        'Content-Type': 'application/json',
      },
      timeout: this.config.timeout || 30000,
    });
  }

  get serviceName(): string {
    return 'Toast Analytics';
  }

  async validateCredentials(): Promise<boolean> {
    try {
      await this.authenticate();
      return true;
    } catch {
      return false;
    }
  }

  async testConnection(): Promise<FetchResult<unknown>> {
    try {
      await this.authenticate();
      return {
        success: true,
        data: { connected: true },
      };
    } catch (error) {
      return {
        success: false,
        error: error as Error,
      };
    }
  }

  async fetchData(params: { dateRange: { start: Date; end: Date } }): Promise<FetchResult<any>> {
    try {
      console.log('Fetching Toast Analytics data...');
      
      // Ensure we have authentication
      await this.authenticate();

      // Fetch sales summary data
      const salesData = await this.fetchSalesData(params.dateRange);
      
      // Fetch recent checks (limited data compared to full orders)
      const checkData = await this.fetchChecksData(params.dateRange);

      // Transform to match expected format
      const transformedData = this.transformAnalyticsData(salesData, checkData);

      console.log(`Fetched ${salesData.length} days of sales data and ${checkData.length} checks`);

      return {
        orders: transformedData.orders,
        payments: transformedData.payments,
        lineItems: [],
        customers: [],
        totalOrders: transformedData.orders.length,
        dateRange: params.dateRange,
      };
    } catch (error) {
      console.error('Toast Analytics fetch error:', error);
      throw error;
    }
  }

  private async authenticate(): Promise<void> {
    // Check if we have a valid token
    if (this.authToken && this.tokenExpiresAt && this.tokenExpiresAt > new Date()) {
      return;
    }

    console.log('Authenticating with Toast Analytics API...');

    try {
      const response = await this.client.post<ToastAnalyticsToken>(
        '/authentication/v1/authentication/oauth/token',
        new URLSearchParams({
          grant_type: 'client_credentials',
          client_id: this.analyticsCredentials.clientId,
          client_secret: this.analyticsCredentials.clientSecret,
        }),
        {
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
        }
      );

      this.authToken = response.data;
      // Set expiration with 5-minute buffer
      this.tokenExpiresAt = new Date(Date.now() + (response.data.expires_in - 300) * 1000);
      
      // Update axios client with auth token
      this.client.defaults.headers.common['Authorization'] = `Bearer ${this.authToken.access_token}`;
    } catch (error: any) {
      console.error('Analytics authentication failed:', error.response?.data || error.message);
      throw new Error('Failed to authenticate with Toast Analytics API');
    }
  }

  private async fetchSalesData(dateRange: { start: Date; end: Date }): Promise<SalesData[]> {
    try {
      const response = await this.client.get('/analytics/v1/sales', {
        params: {
          location_guid: this.analyticsCredentials.locationGuid,
          start_date: dateRange.start.toISOString().split('T')[0],
          end_date: dateRange.end.toISOString().split('T')[0],
        },
      });

      return response.data.sales || [];
    } catch (error: any) {
      console.error('Failed to fetch sales data:', error.response?.data || error.message);
      // Return empty array if endpoint not available
      return [];
    }
  }

  private async fetchChecksData(dateRange: { start: Date; end: Date }): Promise<CheckData[]> {
    try {
      const response = await this.client.get('/analytics/v1/checks', {
        params: {
          location_guid: this.analyticsCredentials.locationGuid,
          start_date: dateRange.start.toISOString(),
          end_date: dateRange.end.toISOString(),
          limit: 100,
        },
      });

      return response.data.checks || [];
    } catch (error: any) {
      console.error('Failed to fetch checks data:', error.response?.data || error.message);
      // Return empty array if endpoint not available
      return [];
    }
  }

  private transformAnalyticsData(_salesData: SalesData[], checkData: CheckData[]) {
    // Transform sales/check data to match our expected format
    const orders = checkData.map(check => ({
      guid: check.guid,
      entityType: 'Order' as const,
      createdDate: check.opened_date,
      modifiedDate: check.closed_date,
      promisedDate: check.closed_date,
      businessDate: parseInt(check.opened_date.split('T')[0].replace(/-/g, '')),
      location: {
        guid: this.analyticsCredentials.locationGuid,
      },
      checks: [{
        guid: check.guid,
        amount: check.total_amount * 100, // Convert to cents
        taxAmount: check.tax_amount * 100,
        tipAmount: check.tip_amount * 100,
        displayNumber: check.check_number,
        server: {
          name: check.server_name,
        },
      }],
      diningOption: {
        name: check.dining_option,
      },
    }));

    // Create simplified payment records from checks
    const payments = checkData.map(check => ({
      guid: `${check.guid}-payment`,
      entityType: 'Payment' as const,
      checkGuid: check.guid,
      orderGuid: check.guid,
      paidDate: check.closed_date,
      amount: (check.total_amount - check.tip_amount) * 100,
      tipAmount: check.tip_amount * 100,
      type: 'UNKNOWN', // Analytics API doesn't provide payment type
    }));

    return { orders, payments };
  }

  async storeData(data: FetchResult<any>, _venueId: string): Promise<void> {
    console.log('Storing Toast Analytics data...');
    
    const snapshotTimestamp = new Date().toISOString();

    try {
      // Store orders
      if (data.orders && data.orders.length > 0) {
        const ordersToInsert = data.orders.map((order: any) => ({
          snapshot_timestamp: snapshotTimestamp,
          order_guid: order.guid,
          location_id: this.analyticsCredentials.locationGuid,
          created_date: order.createdDate,
          closed_date: order.checks?.[0]?.closedDate,
          business_date: order.businessDate,
          dining_option_name: order.diningOption?.name,
          revenue_center_name: 'Analytics API',
          server_first_name: order.checks?.[0]?.server?.name?.split(' ')[0],
          server_last_name: order.checks?.[0]?.server?.name?.split(' ')[1],
        }));

        await this.supabase.from('toast_orders').insert(ordersToInsert);
      }

      // Store simplified payment data
      if (data.payments && data.payments.length > 0) {
        const paymentsToInsert = data.payments.map((payment: any) => ({
          snapshot_timestamp: snapshotTimestamp,
          payment_guid: payment.guid,
          check_guid: payment.checkGuid,
          order_guid: payment.orderGuid,
          amount: payment.amount,
          tip_amount: payment.tipAmount,
          paid_date: payment.paidDate,
          type: payment.type,
        }));

        await this.supabase.from('toast_payments').insert(paymentsToInsert);
      }

      console.log('Toast Analytics data stored successfully');
    } catch (error) {
      console.error('Failed to store Toast Analytics data:', error);
      throw error;
    }
  }
}