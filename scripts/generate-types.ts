#!/usr/bin/env node

/**
 * Generate TypeScript types from Supabase database
 * 
 * Usage: pnpm generate:types
 */

import { exec } from 'child_process';
import { promisify } from 'util';
import * as fs from 'fs/promises';
import * as path from 'path';

const execAsync = promisify(exec);

async function generateTypes() {
  console.log('üîÑ Generating TypeScript types from Supabase...\n');

  const projectId = process.env.SUPABASE_PROJECT_ID || 'bmhplnojfuznflbyqqze';
  
  if (!projectId) {
    console.error('‚ùå Error: SUPABASE_PROJECT_ID environment variable is not set');
    console.error('Please add it to your .env file');
    console.error('You can find it in your Supabase project URL: https://app.supabase.com/project/[PROJECT_ID]');
    process.exit(1);
  }

  try {
    // Generate types using Supabase CLI
    const command = `npx supabase gen types typescript --project-id ${projectId} --schema public`;
    console.log(`Running: ${command}\n`);
    
    const { stdout, stderr } = await execAsync(command);
    
    if (stderr) {
      console.error('Warning:', stderr);
    }

    // Write types to the shared package
    const outputPath = path.join(process.cwd(), 'packages/shared/src/types/database.ts');
    await fs.mkdir(path.dirname(outputPath), { recursive: true });
    
    // Add header to the generated file
    const header = `/**
 * Database types generated from Supabase
 * 
 * DO NOT EDIT THIS FILE DIRECTLY
 * Run 'pnpm generate:types' to regenerate
 * 
 * Generated on: ${new Date().toISOString()}
 */

`;

    await fs.writeFile(outputPath, header + stdout);
    
    console.log(`‚úÖ Types generated successfully!`);
    console.log(`üìÑ Output: ${outputPath}\n`);

    // Create index file for easier imports
    const indexPath = path.join(process.cwd(), 'packages/shared/src/types/index.ts');
    const indexContent = `// Database types
export * from './database';

// Re-export commonly used types for convenience
export type { Database } from './database';
`;
    
    await fs.writeFile(indexPath, indexContent);
    console.log(`üìÑ Created index file: ${indexPath}`);

  } catch (error) {
    console.error('‚ùå Error generating types:', error);
    process.exit(1);
  }
}

// Run the script
generateTypes();