import { describe, it, expect, beforeEach, vi } from 'vitest';
import { MetaConnector } from './meta-connector';
import type { ConnectorConfig, ConnectorCredentials } from '../types';
import { createClient } from '@supabase/supabase-js';
import type { MetaCredentials } from './types';

// Mock fetch
global.fetch = vi.fn();

describe('MetaConnector', () => {
  let connector: MetaConnector;
  const mockCredentials: ConnectorCredentials = {
    type: 'meta',
    credentials: {
      accessToken: 'test-access-token',
      pageId: 'test-page-id',
    } as MetaCredentials,
  };
  const mockConfig: ConnectorConfig = {
    timeout: 5000,
    maxRetries: 0,
  };
  const mockSupabase = createClient('https://test.supabase.co', 'test-key');

  beforeEach(() => {
    vi.clearAllMocks();
    vi.useFakeTimers();
    connector = new MetaConnector(mockCredentials, mockConfig, mockSupabase);
    vi.runAllTimers();
    vi.useRealTimers();
  });

  describe('constructor', () => {
    it('should initialize with correct service name', () => {
      expect(connector.serviceName).toBe('Meta Business Suite');
    });
  });

  describe('validateCredentials', () => {
    it('should return true for valid credentials', async () => {
      (global.fetch as any).mockResolvedValueOnce({
        ok: true,
        json: async () => ({ id: 'test-page-id', name: 'Test Page' }),
      });

      const result = await connector.validateCredentials();
      expect(result).toBe(true);
    });

    it('should return false for invalid credentials', async () => {
      (global.fetch as any).mockResolvedValueOnce({
        ok: false,
        json: async () => ({
          error: {
            message: 'Invalid OAuth access token',
            type: 'OAuthException',
            code: 190,
          },
        }),
      });

      const result = await connector.validateCredentials();
      expect(result).toBe(false);
    });
  });

  describe('testConnection', () => {
    it('should return success for working connection', async () => {
      (global.fetch as any).mockResolvedValueOnce({
        ok: true,
        json: async () => ({
          id: 'test-page-id',
          name: 'Test Venue',
          category: 'Restaurant',
        }),
      });

      const result = await connector.testConnection();
      expect(result.success).toBe(true);
      expect(result.data).toEqual({
        id: 'test-page-id',
        name: 'Test Venue',
        category: 'Restaurant',
      });
    });

    it('should handle API errors', async () => {
      (global.fetch as any).mockResolvedValueOnce({
        ok: true,
        json: async () => ({
          error: {
            message: 'Invalid access token',
            type: 'OAuthException',
            code: 190,
          },
        }),
      });

      const result = await connector.testConnection();
      expect(result.success).toBe(false);
      expect(result.error?.code).toBe('AUTH_FAILED');
    });
  });

  describe('fetchPageInsights', () => {
    it('should fetch and parse page insights correctly', async () => {
      const mockInsights = {
        data: [
          {
            id: 'page_id/insights/page_views_total/day',
            name: 'page_views_total',
            period: 'day',
            values: [{ value: 1500, endTime: '2024-01-15T00:00:00Z' }],
            title: 'Daily Total views count per Page',
            description: 'Daily: Total views count per Page',
          },
          {
            id: 'page_id/insights/page_fans/lifetime',
            name: 'page_fans',
            period: 'lifetime',
            values: [{ value: 25000 }],
            title: 'Lifetime Total Likes',
            description: 'Lifetime: The total number of people who have liked your Page',
          },
        ],
      };

      (global.fetch as any).mockResolvedValueOnce({
        ok: true,
        json: async () => mockInsights,
      });

      const result = await connector.fetchPageInsights(['page_views_total', 'page_fans']);
      expect(result.success).toBe(true);
      expect(result.data).toHaveLength(2);
      expect(result.data?.[0].name).toBe('page_views_total');
      expect(result.data?.[0].values[0].value).toBe(1500);
    });
  });

  describe('fetchPosts', () => {
    it('should fetch posts and their insights', async () => {
      const mockPosts = {
        data: [
          {
            id: 'post-1',
            message: 'Check out our new menu items!',
            created_time: '2024-01-15T10:00:00Z',
            type: 'photo',
            permalink: 'https://facebook.com/post-1',
            shares: { count: 10 },
            reactions: { summary: { total_count: 150 } },
            comments: { summary: { total_count: 25 } },
          },
        ],
      };

      const mockPostInsights = {
        data: [
          { name: 'post_impressions', values: [{ value: 5000 }] },
          { name: 'post_impressions_unique', values: [{ value: 3000 }] },
          { name: 'post_engaged_users', values: [{ value: 200 }] },
          { name: 'post_clicks', values: [{ value: 150 }] },
        ],
      };

      (global.fetch as any)
        .mockResolvedValueOnce({
          ok: true,
          json: async () => mockPosts,
        })
        .mockResolvedValueOnce({
          ok: true,
          json: async () => mockPostInsights,
        });

      const result = await connector.fetchPosts();
      expect(result.success).toBe(true);
      expect(result.data).toHaveLength(1);
      expect(result.data?.[0].message).toBe('Check out our new menu items!');
      expect(result.data?.[0].insights?.impressions).toBe(5000);
      expect(result.data?.[0].insights?.reach).toBe(3000);
    });
  });

  describe('fetchAudienceDemographics', () => {
    it('should fetch and parse audience demographics', async () => {
      const mockDemographics = {
        data: [
          {
            name: 'page_fans_gender_age',
            values: [{
              value: {
                'M.25-34': 500,
                'M.35-44': 400,
                'F.25-34': 600,
                'F.35-44': 450,
              },
            }],
          },
          {
            name: 'page_fans_country',
            values: [{
              value: {
                'US': 1500,
                'CA': 300,
                'UK': 200,
              },
            }],
          },
          {
            name: 'page_fans_city',
            values: [{
              value: {
                'New York, NY': 500,
                'Los Angeles, CA': 300,
                'Chicago, IL': 200,
              },
            }],
          },
        ],
      };

      (global.fetch as any).mockResolvedValueOnce({
        ok: true,
        json: async () => mockDemographics,
      });

      const result = await connector.fetchAudienceDemographics();
      expect(result.success).toBe(true);
      expect(result.data?.ageGenderDistribution).toHaveProperty('M.25-34', 500);
      expect(result.data?.countryDistribution).toHaveProperty('US', 1500);
      expect(result.data?.cityDistribution).toHaveProperty('New York, NY', 500);
    });
  });

  describe('fetchAllData', () => {
    it('should fetch all data and calculate metrics', async () => {
      // Mock page insights
      (global.fetch as any)
        .mockResolvedValueOnce({
          ok: true,
          json: async () => ({
            data: [
              {
                id: 'insights/page_fans',
                name: 'page_fans',
                period: 'lifetime',
                values: [{ value: 5000 }],
                title: 'Page Fans',
                description: 'Total page fans',
              },
              {
                id: 'insights/page_engaged_users',
                name: 'page_engaged_users',
                period: 'day',
                values: [{ value: 500 }],
                title: 'Engaged Users',
                description: 'Daily engaged users',
              },
            ],
          }),
        })
        // Mock posts
        .mockResolvedValueOnce({
          ok: true,
          json: async () => ({
            data: [
              {
                id: 'post-1',
                message: 'Test post',
                created_time: '2024-01-15T10:00:00Z',
                type: 'status',
              },
            ],
          }),
        })
        // Mock post insights
        .mockResolvedValueOnce({
          ok: true,
          json: async () => ({
            data: [
              { name: 'post_impressions', values: [{ value: 1000 }] },
              { name: 'post_impressions_unique', values: [{ value: 800 }] },
              { name: 'post_engaged_users', values: [{ value: 100 }] },
              { name: 'post_clicks', values: [{ value: 50 }] },
            ],
          }),
        })
        // Mock demographics
        .mockResolvedValueOnce({
          ok: true,
          json: async () => ({
            data: [
              {
                name: 'page_fans_gender_age',
                values: [{ value: { 'M.25-34': 500 } }],
              },
            ],
          }),
        });

      const startDate = new Date('2024-01-01');
      const endDate = new Date('2024-01-31');
      const result = await connector.fetchAllData(startDate, endDate);

      expect(result.success).toBe(true);
      expect(result.data?.pageMetrics.pageFans).toBe(5000);
      expect(result.data?.pageMetrics.pageEngagedUsers).toBe(500);
      expect(result.data?.posts).toHaveLength(1);
      expect(result.data?.totalEngagement).toBe(100);
      expect(result.data?.avgEngagementRate).toBe(12.5); // 100/800 * 100
    });

    it('should handle partial failures', async () => {
      (global.fetch as any)
        .mockResolvedValueOnce({
          ok: false,
          status: 500,
        });

      const startDate = new Date('2024-01-01');
      const endDate = new Date('2024-01-31');
      const result = await connector.fetchAllData(startDate, endDate);

      expect(result.success).toBe(false);
      expect(result.error).toBeDefined();
    });
  });

  describe('error handling', () => {
    it('should handle network errors', async () => {
      (global.fetch as any).mockRejectedValueOnce(new Error('Network error'));

      const result = await connector.fetchPosts();
      expect(result.success).toBe(false);
      expect(result.error).toBeDefined();
      expect(result.error?.message).toBe('Network error');
    });

    it('should parse Facebook API errors correctly', async () => {
      (global.fetch as any).mockResolvedValueOnce({
        ok: true,
        json: async () => ({
          error: {
            message: 'Rate limit exceeded',
            type: 'OAuthException',
            code: 32,
          },
        }),
      });

      const result = await connector.testConnection();
      expect(result.success).toBe(false);
      expect(result.error?.code).toBe('RATE_LIMIT');
      expect(result.error?.message).toBe('Rate limit exceeded');
    });

    it('should handle invalid response format', async () => {
      (global.fetch as any).mockResolvedValueOnce({
        ok: true,
        json: async () => ({ invalid: 'response' }),
      });

      const result = await connector.fetchPageInsights(['page_views']);
      expect(result.success).toBe(false);
      expect(result.error?.code).toBe('INVALID_RESPONSE');
    });
  });
});